// =================================
// Copyright (c) 2018 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <gendoc/parsing/Parser.hpp>
[hpp]#include <gendoc/parsing/Scope.hpp>
[cpp]#include <gendoc/code/Expression.hpp>
[cpp]#include <gendoc/code/Statement.hpp>
[cpp]#include <gendoc/syntax/Primitive.hpp>
[cpp]#include <gendoc/syntax/Composite.hpp>
[cpp]#include <gendoc/syntax/Element.hpp>
[cpp]#include <gendoc/parsing/Nonterminal.hpp>
[cpp]#include <gendoc/codedom/Statement.hpp>

namespace gendoc.syntax
{
    [cpp]using namespace gendoc::code;

    grammar Primary
    {
        using Primitive.Primitive;
        using Element.Identifier;
        using Composite.Alternative;
        using gendoc.code.Expression.ExpressionList;
        using gendoc.code.Statement.CompoundStatement;

        Primary(gendoc::parsing::Scope* enclosingScope): gendoc::parsing::Parser*
                    ::=
                    (   RuleCall{ value = RuleCall; }
                    |   Primitive{ value = Primitive; }
                    |   Grouping(enclosingScope){ value = Grouping; }
                    |   Token(enclosingScope){ value = Token; }
                    )
                    (Expectation(value){ value = Expectation; })?
                    (Action(value){ value = Action; })?
                    ;

        RuleCall: gendoc::parsing::Parser*
                    ::= ((token(Nonterminal:ntWithArgs '(') ExpressionList ')' | Nonterminal:nt) Alias?)
                    {
                        std::u32string ruleName;
                        if (!ntWithArgs.empty())
                        {
                            ruleName = ntWithArgs;
                        }
                        else
                        {
                            ruleName = nt;
                        }
                        std::u32string alias = Alias;
                        std::u32string name = !alias.empty() ? alias : ruleName;
                        NonterminalParser* parser(new NonterminalParser(name, ruleName));
                        parser->SetSpan(span);
                        if (!ExpressionList.empty())
                        {
                            parser->SetArguments(ExpressionList); 
                        }
                        value = parser;
                    }
                    ;

        Nonterminal: std::u32string 
                    ::= Identifier{ value = Identifier; }
                    ;

        Alias: std::u32string
                    ::= ':' Identifier!{ value = Identifier; }
                    ;

        Grouping(gendoc::parsing::Scope* enclosingScope): gendoc::parsing::Parser*
                    ::= '(' Alternative(enclosingScope)! ')'!{ value = new gendoc::parsing::GroupingParser(Alternative); }
                    ;

        Token(gendoc::parsing::Scope* enclosingScope): gendoc::parsing::Parser*
                    ::= keyword("token") '('! Alternative(enclosingScope)! ')'!{ value = new TokenParser(Alternative); }
                    ;

        Expectation(gendoc::parsing::Parser* child): gendoc::parsing::Parser* 
                    ::= '!'{ value = new ExpectationParser(child); }
                    ;

        Action(gendoc::parsing::Parser* child): gendoc::parsing::Parser*
                    ::= (CompoundStatement:action ('/' CompoundStatement:failureAction)?)
                    {
                        value = new ActionParser(U"", action, failureAction, child);
                    }
                    ;
    }
}
